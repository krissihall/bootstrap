// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
.container-fixed() {
  margin-right: auto;
  margin-left: auto;
  .make-container-padded();
  &:extend(.clearfix all);
}

// Creates a wrapper for a series of columns
.make-row() {
  margin-left:  (@gutter-xs-padding / -2);
  margin-right: (@gutter-xs-padding / -2);

  @media (min-width: @screen-sm-min) {
    margin-left: (@gutter-sm-padding / -2);
    margin-right: (@gutter-sm-padding / -2);
  }

  @media (min-width: @screen-md-min) {
    margin-left: (@gutter-md-padding / -2);
    margin-right: (@gutter-md-padding / -2);
  }

  @media (min-width: @screen-lg-min) {
    margin-left: (@gutter-lg-padding / -2);
    margin-right: (@gutter-lg-padding / -2);
  }

  &:extend(.clearfix all);
}

// Generate the extra small columns
.make-xs-column(@columns; @gutter: @gutter-xs-padding) {
  position: relative;
  float: left;
  width: percentage((@columns / @grid-columns));
  min-height: 1px;
  // padding-left:  (@gutter / 2);
  // padding-right: (@gutter / 2);
}
.make-xs-column-offset(@columns) {
  margin-left: percentage((@columns / @grid-columns));
}
.make-xs-column-push(@columns) {
  left: percentage((@columns / @grid-columns));
}
.make-xs-column-pull(@columns) {
  right: percentage((@columns / @grid-columns));
}

// Generate the small columns
.make-sm-column(@columns; @gutter: @gutter-sm-padding) {
  position: relative;
  min-height: 1px;
  // padding-left:  (@gutter / 2);
  // padding-right: (@gutter / 2);

  @media (min-width: @screen-sm-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-offset(@columns) {
  @media (min-width: @screen-sm-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-push(@columns) {
  @media (min-width: @screen-sm-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-pull(@columns) {
  @media (min-width: @screen-sm-min) {
    right: percentage((@columns / @grid-columns));
  }
}

// Generate the medium columns
.make-md-column(@columns; @gutter: @gutter-md-padding) {
  position: relative;
  min-height: 1px;
  // padding-left:  (@gutter / 2);
  // padding-right: (@gutter / 2);

  @media (min-width: @screen-md-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}
.make-md-column-offset(@columns) {
  @media (min-width: @screen-md-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-md-column-push(@columns) {
  @media (min-width: @screen-md-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-md-column-pull(@columns) {
  @media (min-width: @screen-md-min) {
    right: percentage((@columns / @grid-columns));
  }
}

// Generate the large columns
.make-lg-column(@columns; @gutter: @gutter-lg-padding) {
  position: relative;
  min-height: 1px;
  // padding-left:  (@gutter / 2);
  // padding-right: (@gutter / 2);

  @media (min-width: @screen-lg-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-offset(@columns) {
  @media (min-width: @screen-lg-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-push(@columns) {
  @media (min-width: @screen-lg-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-pull(@columns) {
  @media (min-width: @screen-lg-min) {
    right: percentage((@columns / @grid-columns));
  }
}



// Mixin to set padding variables in breakpoints
.make-container-padded() {
  padding-left:  @gutter-xs-padding;
  padding-right: @gutter-xs-padding;

  @media (min-width: @screen-sm-min) {
    padding-left:  @gutter-sm-padding;
    padding-right: @gutter-sm-padding;
  }

  @media (min-width: @screen-md-min) {
    padding-left:  @gutter-md-padding;
    padding-right: @gutter-md-padding;
  }

  @media (min-width: @screen-lg-min) {
    padding-left:  @gutter-lg-padding;
    padding-right: @gutter-lg-padding;
  }
}

.make-grid-padded() {
  padding-left:  (@gutter-xs-padding / 2);
  padding-right: (@gutter-xs-padding / 2);

  @media (min-width: @screen-sm-min) {
    padding-left:  (@gutter-sm-padding / 2);
    padding-right: (@gutter-sm-padding / 2);
  }

  @media (min-width: @screen-md-min) {
    padding-left:  (@gutter-md-padding / 2);
    padding-right: (@gutter-md-padding / 2);
  }

  @media (min-width: @screen-lg-min) {
    padding-left:  (@gutter-lg-padding / 2);
    padding-right: (@gutter-lg-padding / 2);
  }
}

// Mixin to remove padding variables from breakpoints
.make-grid-unpadded() {
  padding-left:  0;
  padding-right: 0;

  @media (min-width: @screen-sm-min) {
    padding-left:  0;
    padding-right: 0;
  }

  @media (min-width: @screen-md-min) {
    padding-left:  0;
    padding-right: 0;
  }

  @media (min-width: @screen-lg-min) {
    padding-left:  0;
    padding-right: 0;
  }
}
