// Framework cell grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@cell-columns`.

.make-cell-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .cell(@index) when (@index = 1) { // initial
    @item: ~".cell-xs-@{index}, .cell-sm-@{index}, .cell-md-@{index}, .cell-lg-@{index}";
    .cell((@index + 1), @item);
  }
  .cell(@index, @list) when (@index =< @cell-columns) { // general; "=<" isn't a typo
    @item: ~".cell-xs-@{index}, .cell-sm-@{index}, .cell-md-@{index}, .cell-lg-@{index}";
    .cell((@index + 1), ~"@{list}, @{item}");
  }
  .cell(@index, @list) when (@index > @cell-columns) { // terminal
    @{list} {
      position: relative;
      // Prevent columns from collapsing when empty
      height: 100%;
      // // Inner gutter via padding
      // padding-left:  (@grid-gutter-width / 2);
      // padding-right: (@grid-gutter-width / 2);
    }
  }
  .cell(1); // kickstart it
}

.calc-grid-cell-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .cell-@{class}-@{index} {
    width: percentage((@index / @cell-columns));
  }
}
.calc-grid-cell-column(@index, @class, @type) when (@type = push) and (@index > 0) {
  .cell-@{class}-push-@{index} {
    left: percentage((@index / @cell-columns));
  }
}
.calc-grid-cell-column(@index, @class, @type) when (@type = push) and (@index = 0) {
  .cell-@{class}-push-0 {
    left: auto;
  }
}
.calc-grid-cell-column(@index, @class, @type) when (@type = pull) and (@index > 0) {
  .cell-@{class}-pull-@{index} {
    right: percentage((@index / @cell-columns));
  }
}
.calc-grid-cell-column(@index, @class, @type) when (@type = pull) and (@index = 0) {
  .cell-@{class}-pull-0 {
    right: auto;
  }
}
.calc-grid-cell-column(@index, @class, @type) when (@type = offset) {
  .cell-@{class}-offset-@{index} {
    margin-left: percentage((@index / @cell-columns));
  }
}

// Basic looping in LESS
.loop-cell-columns(@index, @class, @type) when (@index >= 0) {
  .calc-grid-cell-column(@index, @class, @type);
  // next iteration
  .loop-cell-columns((@index - 1), @class, @type);
}

// Create grid for specific class
.make-cell-grid(@class) {
  .loop-cell-columns(@cell-columns, @class, width);
  .loop-cell-columns(@cell-columns, @class, pull);
  .loop-cell-columns(@cell-columns, @class, push);
  .loop-cell-columns(@cell-columns, @class, offset);
}
